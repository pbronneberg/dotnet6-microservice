# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the action will run. 
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ master ]

  pull_request:
    branches: [ master ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build-minimal-native:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    name: Build & Test

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
      
      - name: Setup .NET Core SDK 6
        uses: actions/setup-dotnet@v1.9.0
        with:
          dotnet-version: '6.0.x'
      - name: Install dependencies
        run: dotnet restore minimal
      - name: Build the template
        run: dotnet build --configuration Release --no-restore minimal
      - name: Test the template
        run: dotnet test --verbosity normal minimal

  build-minimal-docker:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    name: Docker build & smoketest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
      
      - name: Test building the docker image
        uses: docker/build-push-action@v2.7.0
        with:
          repository: dotnet-minimal-api-example
          # Path to the Dockerfile
          path: ./minimal
          # Push is a shorthand for --output=type=registry
          push: false
          tags: latest
          tag_with_ref: true
          add_git_labels: true
      
      - name: Smoketest Minimal API
        run: |
            docker run -d -p 8080:80 --name minimal dotnet-minimal-api-example:latest

            echo TEST: Wait until microservice is started
            timeout 30 bash -c 'while [[ "$(curl -X GET -s -o /dev/null -w ''%{http_code}'' http://localhost:8080/health)" != "200" ]]; do sleep 2; done' || false
            
            echo TEST: Swagger API Docs are supported
            curl -X GET -s -o /dev/null -f http://localhost:8080/swagger
            echo OK
            
      - name: Smoketest - Cleanup
        continue-on-error: true
        if: always() 
        run: |
            docker stop minimal
            docker rm minimal
